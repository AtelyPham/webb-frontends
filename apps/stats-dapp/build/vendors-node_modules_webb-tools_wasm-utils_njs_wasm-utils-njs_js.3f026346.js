((typeof self !== 'undefined' ? self : this)["webpackChunk_nepoche_stats_dapp"] = (typeof self !== 'undefined' ? self : this)["webpackChunk_nepoche_stats_dapp"] || []).push([["vendors-node_modules_webb-tools_wasm-utils_njs_wasm-utils-njs_js"],{

/***/ "../../node_modules/@webb-tools/wasm-utils/njs/wasm-utils-njs.js":
/*!***********************************************************************!*\
  !*** ../../node_modules/@webb-tools/wasm-utils/njs/wasm-utils-njs.js ***!
  \***********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var __dirname = "/";
/* module decorator */ module = __webpack_require__.nmd(module);
let imports = {};
imports['__wbindgen_placeholder__'] = module.exports;
let wasm;
const { TextEncoder, TextDecoder } = __webpack_require__(/*! util */ "../../node_modules/util/util.js");

const heap = new Array(32).fill(undefined);

heap.push(undefined, null, true, false);

function getObject(idx) { return heap[idx]; }

let heap_next = heap.length;

function dropObject(idx) {
    if (idx < 36) return;
    heap[idx] = heap_next;
    heap_next = idx;
}

function takeObject(idx) {
    const ret = getObject(idx);
    dropObject(idx);
    return ret;
}

let WASM_VECTOR_LEN = 0;

let cachegetUint8Memory0 = null;
function getUint8Memory0() {
    if (cachegetUint8Memory0 === null || cachegetUint8Memory0.buffer !== wasm.memory.buffer) {
        cachegetUint8Memory0 = new Uint8Array(wasm.memory.buffer);
    }
    return cachegetUint8Memory0;
}

let cachedTextEncoder = new TextEncoder('utf-8');

const encodeString = (typeof cachedTextEncoder.encodeInto === 'function'
    ? function (arg, view) {
    return cachedTextEncoder.encodeInto(arg, view);
}
    : function (arg, view) {
    const buf = cachedTextEncoder.encode(arg);
    view.set(buf);
    return {
        read: arg.length,
        written: buf.length
    };
});

function passStringToWasm0(arg, malloc, realloc) {

    if (realloc === undefined) {
        const buf = cachedTextEncoder.encode(arg);
        const ptr = malloc(buf.length);
        getUint8Memory0().subarray(ptr, ptr + buf.length).set(buf);
        WASM_VECTOR_LEN = buf.length;
        return ptr;
    }

    let len = arg.length;
    let ptr = malloc(len);

    const mem = getUint8Memory0();

    let offset = 0;

    for (; offset < len; offset++) {
        const code = arg.charCodeAt(offset);
        if (code > 0x7F) break;
        mem[ptr + offset] = code;
    }

    if (offset !== len) {
        if (offset !== 0) {
            arg = arg.slice(offset);
        }
        ptr = realloc(ptr, len, len = offset + arg.length * 3);
        const view = getUint8Memory0().subarray(ptr + offset, ptr + len);
        const ret = encodeString(arg, view);

        offset += ret.written;
    }

    WASM_VECTOR_LEN = offset;
    return ptr;
}

function isLikeNone(x) {
    return x === undefined || x === null;
}

let cachegetInt32Memory0 = null;
function getInt32Memory0() {
    if (cachegetInt32Memory0 === null || cachegetInt32Memory0.buffer !== wasm.memory.buffer) {
        cachegetInt32Memory0 = new Int32Array(wasm.memory.buffer);
    }
    return cachegetInt32Memory0;
}

let cachedTextDecoder = new TextDecoder('utf-8', { ignoreBOM: true, fatal: true });

cachedTextDecoder.decode();

function getStringFromWasm0(ptr, len) {
    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));
}

function addHeapObject(obj) {
    if (heap_next === heap.length) heap.push(heap.length + 1);
    const idx = heap_next;
    heap_next = heap[idx];

    heap[idx] = obj;
    return idx;
}

let cachegetFloat64Memory0 = null;
function getFloat64Memory0() {
    if (cachegetFloat64Memory0 === null || cachegetFloat64Memory0.buffer !== wasm.memory.buffer) {
        cachegetFloat64Memory0 = new Float64Array(wasm.memory.buffer);
    }
    return cachegetFloat64Memory0;
}
/**
*/
module.exports.main = function() {
    wasm.main();
};

const u32CvtShim = new Uint32Array(2);

const uint64CvtShim = new BigUint64Array(u32CvtShim.buffer);

function _assertClass(instance, klass) {
    if (!(instance instanceof klass)) {
        throw new Error(`expected instance of ${klass.name}`);
    }
    return instance.ptr;
}
/**
* @param {any} js
* @returns {JsNote | undefined}
*/
module.exports.js_note_of_jsval = function(js) {
    var ret = wasm.js_note_of_jsval(addHeapObject(js));
    return ret === 0 ? undefined : JsNote.__wrap(ret);
};

/**
* @param {string} proof
* @param {Array<any>} public_inputs
* @param {string} vk
* @param {Curve} curve
* @returns {boolean}
*/
module.exports.verify_js_proof = function(proof, public_inputs, vk, curve) {
    var ret = wasm.verify_js_proof(addHeapObject(proof), addHeapObject(public_inputs), addHeapObject(vk), addHeapObject(curve));
    return ret !== 0;
};

/**
* @param {NoteProtocol} protocol
* @param {Curve | undefined} curve
* @param {number | undefined} anchor_count
* @param {number | undefined} in_count
* @param {number | undefined} out_count
* @returns {JsProvingKeys}
*/
module.exports.setupKeys = function(protocol, curve, anchor_count, in_count, out_count) {
    try {
        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
        wasm.setupKeys(retptr, addHeapObject(protocol), isLikeNone(curve) ? 0 : addHeapObject(curve), !isLikeNone(anchor_count), isLikeNone(anchor_count) ? 0 : anchor_count, !isLikeNone(in_count), isLikeNone(in_count) ? 0 : in_count, !isLikeNone(out_count), isLikeNone(out_count) ? 0 : out_count);
        var r0 = getInt32Memory0()[retptr / 4 + 0];
        var r1 = getInt32Memory0()[retptr / 4 + 1];
        var r2 = getInt32Memory0()[retptr / 4 + 2];
        if (r2) {
            throw takeObject(r1);
        }
        return JsProvingKeys.__wrap(r0);
    } finally {
        wasm.__wbindgen_add_to_stack_pointer(16);
    }
};

/**
* @param {JsProofInput} proof_input
* @returns {JsProofOutput}
*/
module.exports.generate_proof_js = function(proof_input) {
    try {
        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
        _assertClass(proof_input, JsProofInput);
        var ptr0 = proof_input.ptr;
        proof_input.ptr = 0;
        wasm.generate_proof_js(retptr, ptr0);
        var r0 = getInt32Memory0()[retptr / 4 + 0];
        var r1 = getInt32Memory0()[retptr / 4 + 1];
        var r2 = getInt32Memory0()[retptr / 4 + 2];
        if (r2) {
            throw takeObject(r1);
        }
        return JsProofOutput.__wrap(r0);
    } finally {
        wasm.__wbindgen_add_to_stack_pointer(16);
    }
};

function handleError(f, args) {
    try {
        return f.apply(this, args);
    } catch (e) {
        wasm.__wbindgen_exn_store(addHeapObject(e));
    }
}

function getArrayU8FromWasm0(ptr, len) {
    return getUint8Memory0().subarray(ptr / 1, ptr / 1 + len);
}
/**
*/
class ExtData {

    static __wrap(ptr) {
        const obj = Object.create(ExtData.prototype);
        obj.ptr = ptr;

        return obj;
    }

    __destroy_into_raw() {
        const ptr = this.ptr;
        this.ptr = 0;

        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_extdata_free(ptr);
    }
    /**
    * @param {Uint8Array} recipient
    * @param {Uint8Array} relayer
    * @param {string} ext_amount
    * @param {string} fee
    * @param {string} refund
    * @param {Uint8Array} token
    * @param {Uint8Array} encrypted_output1
    * @param {Uint8Array} encrypted_output2
    */
    constructor(recipient, relayer, ext_amount, fee, refund, token, encrypted_output1, encrypted_output2) {
        var ret = wasm.extdata_new(addHeapObject(recipient), addHeapObject(relayer), addHeapObject(ext_amount), addHeapObject(fee), addHeapObject(refund), addHeapObject(token), addHeapObject(encrypted_output1), addHeapObject(encrypted_output2));
        return ExtData.__wrap(ret);
    }
    /**
    * @returns {Uint8Array}
    */
    get_encode() {
        var ret = wasm.extdata_get_encode(this.ptr);
        return takeObject(ret);
    }
}
module.exports.ExtData = ExtData;
/**
*/
class JsLeaf {

    __destroy_into_raw() {
        const ptr = this.ptr;
        this.ptr = 0;

        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_jsleaf_free(ptr);
    }
    /**
    * @returns {NoteProtocol}
    */
    get protocol() {
        var ret = wasm.jsleaf_protocol(this.ptr);
        return takeObject(ret);
    }
    /**
    * @returns {Uint8Array}
    */
    get commitment() {
        var ret = wasm.jsleaf_commitment(this.ptr);
        return takeObject(ret);
    }
}
module.exports.JsLeaf = JsLeaf;
/**
*/
class JsNote {

    static __wrap(ptr) {
        const obj = Object.create(JsNote.prototype);
        obj.ptr = ptr;

        return obj;
    }

    __destroy_into_raw() {
        const ptr = this.ptr;
        this.ptr = 0;

        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_jsnote_free(ptr);
    }
    /**
    * @param {JsNoteBuilder} builder
    */
    constructor(builder) {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            _assertClass(builder, JsNoteBuilder);
            var ptr0 = builder.ptr;
            builder.ptr = 0;
            wasm.jsnote_new(retptr, ptr0);
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            var r2 = getInt32Memory0()[retptr / 4 + 2];
            if (r2) {
                throw takeObject(r1);
            }
            return JsNote.__wrap(r0);
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
        }
    }
    /**
    * @param {string} note
    * @returns {JsNote}
    */
    static deserialize(note) {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            wasm.jsnote_deserialize(retptr, addHeapObject(note));
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            var r2 = getInt32Memory0()[retptr / 4 + 2];
            if (r2) {
                throw takeObject(r1);
            }
            return JsNote.__wrap(r0);
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
        }
    }
    /**
    * @returns {Uint8Array}
    */
    getLeafCommitment() {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            wasm.jsnote_getLeafCommitment(retptr, this.ptr);
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            var r2 = getInt32Memory0()[retptr / 4 + 2];
            if (r2) {
                throw takeObject(r1);
            }
            return takeObject(r0);
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
        }
    }
    /**
    * @returns {string}
    */
    serialize() {
        var ret = wasm.jsnote_serialize(this.ptr);
        return takeObject(ret);
    }
    /**
    * @returns {NoteProtocol}
    */
    get protocol() {
        var ret = wasm.jsnote_protocol(this.ptr);
        return takeObject(ret);
    }
    /**
    * @returns {Version}
    */
    get version() {
        var ret = wasm.jsnote_version(this.ptr);
        return takeObject(ret);
    }
    /**
    * @returns {string}
    */
    get targetChainId() {
        var ret = wasm.jsnote_targetChainId(this.ptr);
        return takeObject(ret);
    }
    /**
    * @returns {string}
    */
    get sourceChainId() {
        var ret = wasm.jsnote_sourceChainId(this.ptr);
        return takeObject(ret);
    }
    /**
    * @returns {string}
    */
    get targetIdentifyingData() {
        var ret = wasm.jsnote_targetIdentifyingData(this.ptr);
        return takeObject(ret);
    }
    /**
    * @returns {string}
    */
    get sourceIdentifyingData() {
        var ret = wasm.jsnote_sourceIdentifyingData(this.ptr);
        return takeObject(ret);
    }
    /**
    * @returns {Backend}
    */
    get backend() {
        var ret = wasm.jsnote_backend(this.ptr);
        return takeObject(ret);
    }
    /**
    * @returns {string}
    */
    get hashFunction() {
        var ret = wasm.jsnote_hashFunction(this.ptr);
        return takeObject(ret);
    }
    /**
    * @returns {Curve}
    */
    get curve() {
        var ret = wasm.jsnote_curve(this.ptr);
        return takeObject(ret);
    }
    /**
    * @returns {string}
    */
    get secrets() {
        var ret = wasm.jsnote_secrets(this.ptr);
        return takeObject(ret);
    }
    /**
    * @returns {string}
    */
    get tokenSymbol() {
        var ret = wasm.jsnote_tokenSymbol(this.ptr);
        return takeObject(ret);
    }
    /**
    * @returns {string}
    */
    get amount() {
        var ret = wasm.jsnote_amount(this.ptr);
        return takeObject(ret);
    }
    /**
    * @returns {string}
    */
    get denomination() {
        var ret = wasm.jsnote_denomination(this.ptr);
        return takeObject(ret);
    }
    /**
    * @returns {string}
    */
    get width() {
        var ret = wasm.jsnote_width(this.ptr);
        return takeObject(ret);
    }
    /**
    * @returns {string}
    */
    get exponentiation() {
        var ret = wasm.jsnote_exponentiation(this.ptr);
        return takeObject(ret);
    }
    /**
    * @param {string} index
    */
    mutateIndex(index) {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            wasm.jsnote_mutateIndex(retptr, this.ptr, addHeapObject(index));
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            if (r1) {
                throw takeObject(r0);
            }
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
        }
    }
    /**
    * @param {JsNote} note
    * @returns {JsNote}
    */
    static defaultUtxoNote(note) {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            _assertClass(note, JsNote);
            wasm.jsnote_defaultUtxoNote(retptr, note.ptr);
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            var r2 = getInt32Memory0()[retptr / 4 + 2];
            if (r2) {
                throw takeObject(r1);
            }
            return JsNote.__wrap(r0);
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
        }
    }
    /**
    * @returns {JsUtxo}
    */
    getUtxo() {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            wasm.jsnote_getUtxo(retptr, this.ptr);
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            var r2 = getInt32Memory0()[retptr / 4 + 2];
            if (r2) {
                throw takeObject(r1);
            }
            return JsUtxo.__wrap(r0);
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
        }
    }
    /**
    * @param {JsUtxo} utxo
    */
    update_vanchor_utxo(utxo) {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            _assertClass(utxo, JsUtxo);
            var ptr0 = utxo.ptr;
            utxo.ptr = 0;
            wasm.jsnote_update_vanchor_utxo(retptr, this.ptr, ptr0);
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            if (r1) {
                throw takeObject(r0);
            }
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
        }
    }
    /**
    * @returns {string}
    */
    get index() {
        var ret = wasm.jsnote_index(this.ptr);
        return takeObject(ret);
    }
}
module.exports.JsNote = JsNote;
/**
*/
class JsNoteBuilder {

    static __wrap(ptr) {
        const obj = Object.create(JsNoteBuilder.prototype);
        obj.ptr = ptr;

        return obj;
    }

    __destroy_into_raw() {
        const ptr = this.ptr;
        this.ptr = 0;

        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_jsnotebuilder_free(ptr);
    }
    /**
    */
    constructor() {
        var ret = wasm.jsnotebuilder_new();
        return JsNoteBuilder.__wrap(ret);
    }
    /**
    * @param {NoteProtocol} protocol
    */
    protocol(protocol) {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            wasm.jsnotebuilder_protocol(retptr, this.ptr, addHeapObject(protocol));
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            if (r1) {
                throw takeObject(r0);
            }
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
        }
    }
    /**
    * @param {Version} version
    */
    version(version) {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            wasm.jsnotebuilder_version(retptr, this.ptr, addHeapObject(version));
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            if (r1) {
                throw takeObject(r0);
            }
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
        }
    }
    /**
    * @param {string} source_chain_id
    */
    sourceChainId(source_chain_id) {
        wasm.jsnotebuilder_sourceChainId(this.ptr, addHeapObject(source_chain_id));
    }
    /**
    * @param {string} target_chain_id
    */
    targetChainId(target_chain_id) {
        wasm.jsnotebuilder_targetChainId(this.ptr, addHeapObject(target_chain_id));
    }
    /**
    * @param {string} source_identifying_data
    */
    sourceIdentifyingData(source_identifying_data) {
        wasm.jsnotebuilder_sourceIdentifyingData(this.ptr, addHeapObject(source_identifying_data));
    }
    /**
    * @param {string} target_identifying_data
    */
    targetIdentifyingData(target_identifying_data) {
        wasm.jsnotebuilder_targetIdentifyingData(this.ptr, addHeapObject(target_identifying_data));
    }
    /**
    * @param {Backend} backend
    */
    backend(backend) {
        wasm.jsnotebuilder_backend(this.ptr, addHeapObject(backend));
    }
    /**
    * @param {HashFunction} hash_function
    */
    hashFunction(hash_function) {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            wasm.jsnotebuilder_hashFunction(retptr, this.ptr, addHeapObject(hash_function));
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            if (r1) {
                throw takeObject(r0);
            }
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
        }
    }
    /**
    * @param {Curve} curve
    */
    curve(curve) {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            wasm.jsnotebuilder_curve(retptr, this.ptr, addHeapObject(curve));
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            if (r1) {
                throw takeObject(r0);
            }
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
        }
    }
    /**
    * @param {string} token_symbol
    */
    tokenSymbol(token_symbol) {
        wasm.jsnotebuilder_tokenSymbol(this.ptr, addHeapObject(token_symbol));
    }
    /**
    * @param {string} amount
    */
    amount(amount) {
        wasm.jsnotebuilder_amount(this.ptr, addHeapObject(amount));
    }
    /**
    * @param {string} denomination
    */
    denomination(denomination) {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            wasm.jsnotebuilder_denomination(retptr, this.ptr, addHeapObject(denomination));
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            if (r1) {
                throw takeObject(r0);
            }
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
        }
    }
    /**
    * @param {string} index
    */
    index(index) {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            wasm.jsnotebuilder_index(retptr, this.ptr, addHeapObject(index));
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            if (r1) {
                throw takeObject(r0);
            }
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
        }
    }
    /**
    * @param {string} exponentiation
    */
    exponentiation(exponentiation) {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            wasm.jsnotebuilder_exponentiation(retptr, this.ptr, addHeapObject(exponentiation));
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            if (r1) {
                throw takeObject(r0);
            }
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
        }
    }
    /**
    * @param {string} width
    */
    width(width) {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            wasm.jsnotebuilder_width(retptr, this.ptr, addHeapObject(width));
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            if (r1) {
                throw takeObject(r0);
            }
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
        }
    }
    /**
    * @param {string} secrets
    */
    setSecrets(secrets) {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            wasm.jsnotebuilder_setSecrets(retptr, this.ptr, addHeapObject(secrets));
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            if (r1) {
                throw takeObject(r0);
            }
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
        }
    }
    /**
    * @param {Uint8Array} private_key
    */
    setPrivateKey(private_key) {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            wasm.jsnotebuilder_setPrivateKey(retptr, this.ptr, addHeapObject(private_key));
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            if (r1) {
                throw takeObject(r0);
            }
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
        }
    }
    /**
    * @param {Uint8Array} blinding
    */
    setBlinding(blinding) {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            wasm.jsnotebuilder_setBlinding(retptr, this.ptr, addHeapObject(blinding));
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            if (r1) {
                throw takeObject(r0);
            }
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
        }
    }
    /**
    * @returns {JsNote}
    */
    build() {
        try {
            const ptr = this.__destroy_into_raw();
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            wasm.jsnotebuilder_build(retptr, ptr);
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            var r2 = getInt32Memory0()[retptr / 4 + 2];
            if (r2) {
                throw takeObject(r1);
            }
            return JsNote.__wrap(r0);
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
        }
    }
}
module.exports.JsNoteBuilder = JsNoteBuilder;
/**
*/
class JsProofInput {

    static __wrap(ptr) {
        const obj = Object.create(JsProofInput.prototype);
        obj.ptr = ptr;

        return obj;
    }

    __destroy_into_raw() {
        const ptr = this.ptr;
        this.ptr = 0;

        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_jsproofinput_free(ptr);
    }
}
module.exports.JsProofInput = JsProofInput;
/**
*/
class JsProofInputBuilder {

    static __wrap(ptr) {
        const obj = Object.create(JsProofInputBuilder.prototype);
        obj.ptr = ptr;

        return obj;
    }

    __destroy_into_raw() {
        const ptr = this.ptr;
        this.ptr = 0;

        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_jsproofinputbuilder_free(ptr);
    }
    /**
    * @param {NoteProtocol} protocol
    */
    constructor(protocol) {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            wasm.jsproofinputbuilder_new(retptr, addHeapObject(protocol));
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            var r2 = getInt32Memory0()[retptr / 4 + 2];
            if (r2) {
                throw takeObject(r1);
            }
            return JsProofInputBuilder.__wrap(r0);
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
        }
    }
    /**
    * @param {Leaves} roots
    */
    setRoots(roots) {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            wasm.jsproofinputbuilder_setRoots(retptr, this.ptr, addHeapObject(roots));
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            if (r1) {
                throw takeObject(r0);
            }
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
        }
    }
    /**
    * @param {string} recipient
    */
    setRecipient(recipient) {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            wasm.jsproofinputbuilder_setRecipient(retptr, this.ptr, addHeapObject(recipient));
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            if (r1) {
                throw takeObject(r0);
            }
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
        }
    }
    /**
    * @param {string} relayer
    */
    setRelayer(relayer) {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            wasm.jsproofinputbuilder_setRelayer(retptr, this.ptr, addHeapObject(relayer));
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            if (r1) {
                throw takeObject(r0);
            }
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
        }
    }
    /**
    * @param {Leaves} leaves
    */
    setLeaves(leaves) {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            wasm.jsproofinputbuilder_setLeaves(retptr, this.ptr, addHeapObject(leaves));
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            if (r1) {
                throw takeObject(r0);
            }
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
        }
    }
    /**
    * @param {JsUtxo} utxo1
    * @param {JsUtxo} utxo2
    */
    setOutputUtxos(utxo1, utxo2) {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            _assertClass(utxo1, JsUtxo);
            var ptr0 = utxo1.ptr;
            utxo1.ptr = 0;
            _assertClass(utxo2, JsUtxo);
            var ptr1 = utxo2.ptr;
            utxo2.ptr = 0;
            wasm.jsproofinputbuilder_setOutputUtxos(retptr, this.ptr, ptr0, ptr1);
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            if (r1) {
                throw takeObject(r0);
            }
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
        }
    }
    /**
    * @param {LeavesMapInput} leaves_input
    */
    setLeavesMap(leaves_input) {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            _assertClass(leaves_input, LeavesMapInput);
            var ptr0 = leaves_input.ptr;
            leaves_input.ptr = 0;
            wasm.jsproofinputbuilder_setLeavesMap(retptr, this.ptr, ptr0);
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            if (r1) {
                throw takeObject(r0);
            }
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
        }
    }
    /**
    * @param {Indices} indices
    */
    setIndices(indices) {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            wasm.jsproofinputbuilder_setIndices(retptr, this.ptr, addHeapObject(indices));
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            if (r1) {
                throw takeObject(r0);
            }
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
        }
    }
    /**
    * @param {string} leaf_index
    */
    setLeafIndex(leaf_index) {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            wasm.jsproofinputbuilder_setLeafIndex(retptr, this.ptr, addHeapObject(leaf_index));
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            if (r1) {
                throw takeObject(r0);
            }
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
        }
    }
    /**
    * @param {string} fee
    */
    setFee(fee) {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            wasm.jsproofinputbuilder_setFee(retptr, this.ptr, addHeapObject(fee));
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            if (r1) {
                throw takeObject(r0);
            }
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
        }
    }
    /**
    * @param {string} refund
    */
    setRefund(refund) {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            wasm.jsproofinputbuilder_setRefund(retptr, this.ptr, addHeapObject(refund));
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            if (r1) {
                throw takeObject(r0);
            }
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
        }
    }
    /**
    * @param {string} pk
    */
    setPk(pk) {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            wasm.jsproofinputbuilder_setPk(retptr, this.ptr, addHeapObject(pk));
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            if (r1) {
                throw takeObject(r0);
            }
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
        }
    }
    /**
    * @param {string} public_amount
    */
    public_amount(public_amount) {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            wasm.jsproofinputbuilder_public_amount(retptr, this.ptr, addHeapObject(public_amount));
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            if (r1) {
                throw takeObject(r0);
            }
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
        }
    }
    /**
    * @param {string} chain_id
    */
    chain_id(chain_id) {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            wasm.jsproofinputbuilder_chain_id(retptr, this.ptr, addHeapObject(chain_id));
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            if (r1) {
                throw takeObject(r0);
            }
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
        }
    }
    /**
    * @param {JsNote} note
    */
    setNote(note) {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            _assertClass(note, JsNote);
            wasm.jsproofinputbuilder_setNote(retptr, this.ptr, note.ptr);
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            if (r1) {
                throw takeObject(r0);
            }
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
        }
    }
    /**
    * @returns {JsProofInput}
    */
    build_js() {
        try {
            const ptr = this.__destroy_into_raw();
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            wasm.jsproofinputbuilder_build_js(retptr, ptr);
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            var r2 = getInt32Memory0()[retptr / 4 + 2];
            if (r2) {
                throw takeObject(r1);
            }
            return JsProofInput.__wrap(r0);
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
        }
    }
    /**
    * Set notes for VAnchor
    * @param {Array<any>} notes
    */
    setNotes(notes) {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            wasm.jsproofinputbuilder_setNotes(retptr, this.ptr, addHeapObject(notes));
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            if (r1) {
                throw takeObject(r0);
            }
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
        }
    }
    /**
    * @param {string} ex_data_hash
    */
    setExtDatahash(ex_data_hash) {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            wasm.jsproofinputbuilder_setExtDatahash(retptr, this.ptr, addHeapObject(ex_data_hash));
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            if (r1) {
                throw takeObject(r0);
            }
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
        }
    }
}
module.exports.JsProofInputBuilder = JsProofInputBuilder;
/**
*/
class JsProofOutput {

    static __wrap(ptr) {
        const obj = Object.create(JsProofOutput.prototype);
        obj.ptr = ptr;

        return obj;
    }

    __destroy_into_raw() {
        const ptr = this.ptr;
        this.ptr = 0;

        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_jsproofoutput_free(ptr);
    }
    /**
    * @returns {NoteProtocol}
    */
    get OutputProtocol() {
        var ret = wasm.jsproofoutput_OutputProtocol(this.ptr);
        return takeObject(ret);
    }
    /**
    * @returns {MixerProof}
    */
    get mixerProof() {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            wasm.jsproofoutput_mixerProof(retptr, this.ptr);
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            var r2 = getInt32Memory0()[retptr / 4 + 2];
            if (r2) {
                throw takeObject(r1);
            }
            return MixerProof.__wrap(r0);
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
        }
    }
    /**
    * @returns {VAnchorProof}
    */
    get vanchorProof() {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            wasm.jsproofoutput_vanchorProof(retptr, this.ptr);
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            var r2 = getInt32Memory0()[retptr / 4 + 2];
            if (r2) {
                throw takeObject(r1);
            }
            return VAnchorProof.__wrap(r0);
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
        }
    }
}
module.exports.JsProofOutput = JsProofOutput;
/**
*/
class JsProvingKeys {

    static __wrap(ptr) {
        const obj = Object.create(JsProvingKeys.prototype);
        obj.ptr = ptr;

        return obj;
    }

    __destroy_into_raw() {
        const ptr = this.ptr;
        this.ptr = 0;

        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_jsprovingkeys_free(ptr);
    }
    /**
    * @returns {Uint8Array}
    */
    get pk() {
        var ret = wasm.jsprovingkeys_pk(this.ptr);
        return takeObject(ret);
    }
    /**
    * @returns {Uint8Array}
    */
    get vk() {
        var ret = wasm.jsprovingkeys_pk(this.ptr);
        return takeObject(ret);
    }
}
module.exports.JsProvingKeys = JsProvingKeys;
/**
*/
class JsUtxo {

    static __wrap(ptr) {
        const obj = Object.create(JsUtxo.prototype);
        obj.ptr = ptr;

        return obj;
    }

    __destroy_into_raw() {
        const ptr = this.ptr;
        this.ptr = 0;

        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_jsutxo_free(ptr);
    }
    /**
    * @returns {string}
    */
    serialize() {
        var ret = wasm.jsutxo_serialize(this.ptr);
        return takeObject(ret);
    }
    /**
    * @param {string} utxo_str
    * @returns {JsUtxo}
    */
    static deserialize(utxo_str) {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            wasm.jsutxo_deserialize(retptr, addHeapObject(utxo_str));
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            var r2 = getInt32Memory0()[retptr / 4 + 2];
            if (r2) {
                throw takeObject(r1);
            }
            return JsUtxo.__wrap(r0);
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
        }
    }
    /**
    * @param {Curve} curve
    * @param {Backend} backend
    * @param {string} amount
    * @param {string} chain_id
    * @param {string | undefined} index
    * @param {Uint8Array | undefined} private_key
    * @param {Uint8Array | undefined} blinding
    */
    constructor(curve, backend, amount, chain_id, index, private_key, blinding) {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            wasm.jsutxo_construct(retptr, addHeapObject(curve), addHeapObject(backend), addHeapObject(amount), addHeapObject(chain_id), isLikeNone(index) ? 0 : addHeapObject(index), isLikeNone(private_key) ? 0 : addHeapObject(private_key), isLikeNone(blinding) ? 0 : addHeapObject(blinding));
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            var r2 = getInt32Memory0()[retptr / 4 + 2];
            if (r2) {
                throw takeObject(r1);
            }
            return JsUtxo.__wrap(r0);
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
        }
    }
    /**
    * @returns {BigInt}
    */
    get chainIdRaw() {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            wasm.jsutxo_chainIdRaw(retptr, this.ptr);
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            u32CvtShim[0] = r0;
            u32CvtShim[1] = r1;
            const n0 = uint64CvtShim[0];
            return n0;
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
        }
    }
    /**
    * @returns {string}
    */
    get chainId() {
        var ret = wasm.jsutxo_chainId(this.ptr);
        return takeObject(ret);
    }
    /**
    * @returns {string}
    */
    get amount() {
        var ret = wasm.jsutxo_amount(this.ptr);
        return takeObject(ret);
    }
    /**
    * @returns {string}
    */
    get blinding() {
        var ret = wasm.jsutxo_blinding(this.ptr);
        return takeObject(ret);
    }
    /**
    * @returns {string}
    */
    get secret_key() {
        var ret = wasm.jsutxo_secret_key(this.ptr);
        return takeObject(ret);
    }
    /**
    * @returns {any}
    */
    get index() {
        var ret = wasm.jsutxo_index(this.ptr);
        return takeObject(ret);
    }
    /**
    * @returns {string}
    */
    get nullifier() {
        var ret = wasm.jsutxo_nullifier(this.ptr);
        return takeObject(ret);
    }
    /**
    * @returns {Uint8Array}
    */
    get commitment() {
        var ret = wasm.jsutxo_commitment(this.ptr);
        return takeObject(ret);
    }
}
module.exports.JsUtxo = JsUtxo;
/**
*/
class LeavesMapInput {

    static __wrap(ptr) {
        const obj = Object.create(LeavesMapInput.prototype);
        obj.ptr = ptr;

        return obj;
    }

    __destroy_into_raw() {
        const ptr = this.ptr;
        this.ptr = 0;

        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_leavesmapinput_free(ptr);
    }
    /**
    */
    constructor() {
        var ret = wasm.leavesmapinput_new();
        return LeavesMapInput.__wrap(ret);
    }
    /**
    * @param {BigInt} chain_id
    * @param {Leaves} leaves
    */
    setChainLeaves(chain_id, leaves) {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            uint64CvtShim[0] = chain_id;
            const low0 = u32CvtShim[0];
            const high0 = u32CvtShim[1];
            wasm.leavesmapinput_setChainLeaves(retptr, this.ptr, low0, high0, addHeapObject(leaves));
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            if (r1) {
                throw takeObject(r0);
            }
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
        }
    }
}
module.exports.LeavesMapInput = LeavesMapInput;
/**
*/
class MTBn254X5 {

    static __wrap(ptr) {
        const obj = Object.create(MTBn254X5.prototype);
        obj.ptr = ptr;

        return obj;
    }

    __destroy_into_raw() {
        const ptr = this.ptr;
        this.ptr = 0;

        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_mtbn254x5_free(ptr);
    }
    /**
    * @param {Leaves} initial_leaves
    * @param {string} leaf_index
    */
    constructor(initial_leaves, leaf_index) {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            wasm.mtbn254x5_new(retptr, addHeapObject(initial_leaves), addHeapObject(leaf_index));
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            var r2 = getInt32Memory0()[retptr / 4 + 2];
            if (r2) {
                throw takeObject(r1);
            }
            return MTBn254X5.__wrap(r0);
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
        }
    }
    /**
    * @returns {string}
    */
    get root() {
        var ret = wasm.mtbn254x5_root(this.ptr);
        return takeObject(ret);
    }
    /**
    * @param {Leaves} leaves
    */
    insert(leaves) {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            wasm.mtbn254x5_insert(retptr, this.ptr, addHeapObject(leaves));
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            if (r1) {
                throw takeObject(r0);
            }
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
        }
    }
}
module.exports.MTBn254X5 = MTBn254X5;
/**
*/
class MixerProof {

    static __wrap(ptr) {
        const obj = Object.create(MixerProof.prototype);
        obj.ptr = ptr;

        return obj;
    }

    __destroy_into_raw() {
        const ptr = this.ptr;
        this.ptr = 0;

        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_mixerproof_free(ptr);
    }
    /**
    * @returns {string}
    */
    get proof() {
        var ret = wasm.mixerproof_proof(this.ptr);
        return takeObject(ret);
    }
    /**
    * @returns {string}
    */
    get nullifierHash() {
        var ret = wasm.mixerproof_nullifierHash(this.ptr);
        return takeObject(ret);
    }
    /**
    * @returns {string}
    */
    get root() {
        var ret = wasm.mixerproof_root(this.ptr);
        return takeObject(ret);
    }
    /**
    * @returns {Array<any>}
    */
    get publicInputs() {
        var ret = wasm.mixerproof_publicInputs(this.ptr);
        return takeObject(ret);
    }
    /**
    * @returns {Uint8Array}
    */
    get leaf() {
        var ret = wasm.mixerproof_leaf(this.ptr);
        return takeObject(ret);
    }
}
module.exports.MixerProof = MixerProof;
/**
* Final Operation Error
*/
class OperationError {

    static __wrap(ptr) {
        const obj = Object.create(OperationError.prototype);
        obj.ptr = ptr;

        return obj;
    }

    __destroy_into_raw() {
        const ptr = this.ptr;
        this.ptr = 0;

        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_operationerror_free(ptr);
    }
    /**
    * @returns {any}
    */
    get code() {
        var ret = wasm.operationerror_code(this.ptr);
        return takeObject(ret);
    }
    /**
    * @returns {string}
    */
    get error_message() {
        var ret = wasm.operationerror_error_message(this.ptr);
        return takeObject(ret);
    }
    /**
    * @returns {string}
    */
    get message() {
        var ret = wasm.operationerror_error_message(this.ptr);
        return takeObject(ret);
    }
    /**
    * @returns {string}
    */
    get data() {
        var ret = wasm.operationerror_data(this.ptr);
        return takeObject(ret);
    }
}
module.exports.OperationError = OperationError;
/**
*/
class VAnchorProof {

    static __wrap(ptr) {
        const obj = Object.create(VAnchorProof.prototype);
        obj.ptr = ptr;

        return obj;
    }

    __destroy_into_raw() {
        const ptr = this.ptr;
        this.ptr = 0;

        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_vanchorproof_free(ptr);
    }
    /**
    * @returns {Array<any>}
    */
    get publicInputs() {
        var ret = wasm.vanchorproof_publicInputs(this.ptr);
        return takeObject(ret);
    }
    /**
    * @returns {Array<any>}
    */
    get outputNotes() {
        var ret = wasm.vanchorproof_outputNotes(this.ptr);
        return takeObject(ret);
    }
    /**
    * @returns {Array<any>}
    */
    get inputUtxos() {
        var ret = wasm.vanchorproof_inputUtxos(this.ptr);
        return takeObject(ret);
    }
    /**
    * @returns {string}
    */
    get proof() {
        var ret = wasm.vanchorproof_proof(this.ptr);
        return takeObject(ret);
    }
    /**
    * @returns {Uint8Array}
    */
    get publicAmount() {
        var ret = wasm.vanchorproof_publicAmount(this.ptr);
        return takeObject(ret);
    }
}
module.exports.VAnchorProof = VAnchorProof;

module.exports.__wbindgen_object_drop_ref = function(arg0) {
    takeObject(arg0);
};

module.exports.__wbindgen_string_get = function(arg0, arg1) {
    const obj = getObject(arg1);
    var ret = typeof(obj) === 'string' ? obj : undefined;
    var ptr0 = isLikeNone(ret) ? 0 : passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
    var len0 = WASM_VECTOR_LEN;
    getInt32Memory0()[arg0 / 4 + 1] = len0;
    getInt32Memory0()[arg0 / 4 + 0] = ptr0;
};

module.exports.__wbindgen_string_new = function(arg0, arg1) {
    var ret = getStringFromWasm0(arg0, arg1);
    return addHeapObject(ret);
};

module.exports.__wbindgen_number_new = function(arg0) {
    var ret = arg0;
    return addHeapObject(ret);
};

module.exports.__wbg_operationerror_new = function(arg0) {
    var ret = OperationError.__wrap(arg0);
    return addHeapObject(ret);
};

module.exports.__wbindgen_bigint_new = function(arg0, arg1) {
    var ret = BigInt(getStringFromWasm0(arg0, arg1));
    return addHeapObject(ret);
};

module.exports.__wbg_jsutxo_new = function(arg0) {
    var ret = JsUtxo.__wrap(arg0);
    return addHeapObject(ret);
};

module.exports.__wbg_jsnote_new = function(arg0) {
    var ret = JsNote.__wrap(arg0);
    return addHeapObject(ret);
};

module.exports.__wbindgen_object_clone_ref = function(arg0) {
    var ret = getObject(arg0);
    return addHeapObject(ret);
};

module.exports.__wbindgen_number_get = function(arg0, arg1) {
    const obj = getObject(arg1);
    var ret = typeof(obj) === 'number' ? obj : undefined;
    getFloat64Memory0()[arg0 / 8 + 1] = isLikeNone(ret) ? 0 : ret;
    getInt32Memory0()[arg0 / 4 + 0] = !isLikeNone(ret);
};

module.exports.__wbg_new_693216e109162396 = function() {
    var ret = new Error();
    return addHeapObject(ret);
};

module.exports.__wbg_stack_0ddaca5d1abfb52f = function(arg0, arg1) {
    var ret = getObject(arg1).stack;
    var ptr0 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
    var len0 = WASM_VECTOR_LEN;
    getInt32Memory0()[arg0 / 4 + 1] = len0;
    getInt32Memory0()[arg0 / 4 + 0] = ptr0;
};

module.exports.__wbg_error_09919627ac0992f5 = function(arg0, arg1) {
    try {
        console.error(getStringFromWasm0(arg0, arg1));
    } finally {
        wasm.__wbindgen_free(arg0, arg1);
    }
};

module.exports.__wbg_randomFillSync_378e02b85af41ab6 = function() { return handleError(function (arg0, arg1, arg2) {
    getObject(arg0).randomFillSync(getArrayU8FromWasm0(arg1, arg2));
}, arguments) };

module.exports.__wbg_getRandomValues_99bbe8a65f4aef87 = function() { return handleError(function (arg0, arg1) {
    getObject(arg0).getRandomValues(getObject(arg1));
}, arguments) };

module.exports.__wbg_process_5729605ce9d34ea8 = function(arg0) {
    var ret = getObject(arg0).process;
    return addHeapObject(ret);
};

module.exports.__wbindgen_is_object = function(arg0) {
    const val = getObject(arg0);
    var ret = typeof(val) === 'object' && val !== null;
    return ret;
};

module.exports.__wbg_versions_531e16e1a776ee97 = function(arg0) {
    var ret = getObject(arg0).versions;
    return addHeapObject(ret);
};

module.exports.__wbg_node_18b58a160b60d170 = function(arg0) {
    var ret = getObject(arg0).node;
    return addHeapObject(ret);
};

module.exports.__wbindgen_is_string = function(arg0) {
    var ret = typeof(getObject(arg0)) === 'string';
    return ret;
};

module.exports.__wbg_static_accessor_NODE_MODULE_bdc5ca9096c68aeb = function() {
    var ret = module;
    return addHeapObject(ret);
};

module.exports.__wbg_require_edfaedd93e302925 = function() { return handleError(function (arg0, arg1, arg2) {
    var ret = getObject(arg0).require(getStringFromWasm0(arg1, arg2));
    return addHeapObject(ret);
}, arguments) };

module.exports.__wbg_crypto_2bc4d5b05161de5b = function(arg0) {
    var ret = getObject(arg0).crypto;
    return addHeapObject(ret);
};

module.exports.__wbg_msCrypto_d003eebe62c636a9 = function(arg0) {
    var ret = getObject(arg0).msCrypto;
    return addHeapObject(ret);
};

module.exports.__wbg_get_f45dff51f52d7222 = function(arg0, arg1) {
    var ret = getObject(arg0)[arg1 >>> 0];
    return addHeapObject(ret);
};

module.exports.__wbg_length_7b60f47bde714631 = function(arg0) {
    var ret = getObject(arg0).length;
    return ret;
};

module.exports.__wbg_new_16f24b0728c5e67b = function() {
    var ret = new Array();
    return addHeapObject(ret);
};

module.exports.__wbg_newnoargs_f579424187aa1717 = function(arg0, arg1) {
    var ret = new Function(getStringFromWasm0(arg0, arg1));
    return addHeapObject(ret);
};

module.exports.__wbg_get_8bbb82393651dd9c = function() { return handleError(function (arg0, arg1) {
    var ret = Reflect.get(getObject(arg0), getObject(arg1));
    return addHeapObject(ret);
}, arguments) };

module.exports.__wbg_call_89558c3e96703ca1 = function() { return handleError(function (arg0, arg1) {
    var ret = getObject(arg0).call(getObject(arg1));
    return addHeapObject(ret);
}, arguments) };

module.exports.__wbg_from_4216160a11e086ef = function(arg0) {
    var ret = Array.from(getObject(arg0));
    return addHeapObject(ret);
};

module.exports.__wbg_push_a72df856079e6930 = function(arg0, arg1) {
    var ret = getObject(arg0).push(getObject(arg1));
    return ret;
};

module.exports.__wbg_name_8ff16108d2c419ae = function(arg0) {
    var ret = getObject(arg0).name;
    return addHeapObject(ret);
};

module.exports.__wbg_constructor_4787e7aac6dc1da3 = function(arg0) {
    var ret = getObject(arg0).constructor;
    return addHeapObject(ret);
};

module.exports.__wbg_getPrototypeOf_77c01ca6c06f0aac = function(arg0) {
    var ret = Object.getPrototypeOf(getObject(arg0));
    return addHeapObject(ret);
};

module.exports.__wbg_self_e23d74ae45fb17d1 = function() { return handleError(function () {
    var ret = self.self;
    return addHeapObject(ret);
}, arguments) };

module.exports.__wbg_window_b4be7f48b24ac56e = function() { return handleError(function () {
    var ret = window.window;
    return addHeapObject(ret);
}, arguments) };

module.exports.__wbg_globalThis_d61b1f48a57191ae = function() { return handleError(function () {
    var ret = globalThis.globalThis;
    return addHeapObject(ret);
}, arguments) };

module.exports.__wbg_global_e7669da72fd7f239 = function() { return handleError(function () {
    var ret = __webpack_require__.g.global;
    return addHeapObject(ret);
}, arguments) };

module.exports.__wbindgen_is_undefined = function(arg0) {
    var ret = getObject(arg0) === undefined;
    return ret;
};

module.exports.__wbg_buffer_5e74a88a1424a2e0 = function(arg0) {
    var ret = getObject(arg0).buffer;
    return addHeapObject(ret);
};

module.exports.__wbg_newwithbyteoffsetandlength_278ec7532799393a = function(arg0, arg1, arg2) {
    var ret = new Uint8Array(getObject(arg0), arg1 >>> 0, arg2 >>> 0);
    return addHeapObject(ret);
};

module.exports.__wbg_new_e3b800e570795b3c = function(arg0) {
    var ret = new Uint8Array(getObject(arg0));
    return addHeapObject(ret);
};

module.exports.__wbg_set_5b8081e9d002f0df = function(arg0, arg1, arg2) {
    getObject(arg0).set(getObject(arg1), arg2 >>> 0);
};

module.exports.__wbg_length_30803400a8f15c59 = function(arg0) {
    var ret = getObject(arg0).length;
    return ret;
};

module.exports.__wbg_newwithlength_5f4ce114a24dfe1e = function(arg0) {
    var ret = new Uint8Array(arg0 >>> 0);
    return addHeapObject(ret);
};

module.exports.__wbg_subarray_a68f835ca2af506f = function(arg0, arg1, arg2) {
    var ret = getObject(arg0).subarray(arg1 >>> 0, arg2 >>> 0);
    return addHeapObject(ret);
};

module.exports.__wbindgen_throw = function(arg0, arg1) {
    throw new Error(getStringFromWasm0(arg0, arg1));
};

module.exports.__wbindgen_memory = function() {
    var ret = wasm.memory;
    return addHeapObject(ret);
};

const path = (__webpack_require__(/*! path */ "../../node_modules/path-browserify/index.js").join)(__dirname, 'wasm-utils-njs_bg.wasm');
const bytes = (__webpack_require__(/*! fs */ "?1888").readFileSync)(path);

const wasmModule = new WebAssembly.Module(bytes);
const wasmInstance = new WebAssembly.Instance(wasmModule, imports);
wasm = wasmInstance.exports;
module.exports.__wasm = wasm;

wasm.__wbindgen_start();



/***/ })

}]);
//# sourceMappingURL=vendors-node_modules_webb-tools_wasm-utils_njs_wasm-utils-njs_js.3f026346.js.map