{"version":3,"file":"vendors-node_modules_webb-tools_wasm-utils_njs_wasm-utils-njs_js.3f026346.js","mappings":";;;;;;;;;;AAAA;AACA;AACA;AACA,QAAQ,2BAA2B,EAAE,mBAAO,CAAC,6CAAM;;AAEnD;;AAEA;;AAEA,0BAA0B;;AAE1B;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA,WAAW,cAAc;AACzB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,mDAAmD,8BAA8B;;AAEjF;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA,gDAAgD,WAAW;AAC3D;AACA;AACA;AACA;AACA,UAAU,KAAK;AACf,YAAY;AACZ;AACA,+BAA+B;AAC/B;AACA;AACA;;AAEA;AACA,UAAU,QAAQ;AAClB,UAAU,YAAY;AACtB,UAAU,QAAQ;AAClB,UAAU,OAAO;AACjB,YAAY;AACZ;AACA,8BAA8B;AAC9B;AACA;AACA;;AAEA;AACA,UAAU,cAAc;AACxB,UAAU,mBAAmB;AAC7B,UAAU,oBAAoB;AAC9B,UAAU,oBAAoB;AAC9B,UAAU,oBAAoB;AAC9B,YAAY;AACZ;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA,UAAU,cAAc;AACxB,YAAY;AACZ;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAc,YAAY;AAC1B,cAAc,YAAY;AAC1B,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB,cAAc,YAAY;AAC1B,cAAc,YAAY;AAC1B,cAAc,YAAY;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAc,eAAe;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,cAAc;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,cAAc,SAAS;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA,cAAc,SAAS;AACvB;AACA;AACA;AACA;AACA;AACA,cAAc,cAAc;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,cAAc,YAAY;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,cAAc,YAAY;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAc,cAAc;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,cAAc,gBAAgB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,cAAc,SAAS;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,cAAc,YAAY;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,cAAc,OAAO;AACrB,cAAc,SAAS;AACvB,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB,cAAc,oBAAoB;AAClC,cAAc,wBAAwB;AACtC,cAAc,wBAAwB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;;AAE3B,yCAAyC;AACzC;AACA;;AAEA,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,oCAAoC;AACpC;AACA;AACA;;AAEA,oCAAoC;AACpC;AACA;AACA;;AAEA,uCAAuC;AACvC;AACA;AACA;;AAEA,oCAAoC;AACpC;AACA;AACA;;AAEA,+BAA+B;AAC/B;AACA;AACA;;AAEA,+BAA+B;AAC/B;AACA;AACA;;AAEA,0CAA0C;AAC1C;AACA;AACA;;AAEA,oCAAoC;AACpC;AACA;AACA;AACA;AACA;;AAEA,yCAAyC;AACzC;AACA;AACA;;AAEA,2CAA2C;AAC3C;AACA;AACA;AACA;AACA;AACA;;AAEA,2CAA2C;AAC3C;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA,oDAAoD,gBAAgB;AACpE;AACA,CAAC;;AAED,qDAAqD,gBAAgB;AACrE;AACA,CAAC;;AAED,6CAA6C;AAC7C;AACA;AACA;;AAEA,mCAAmC;AACnC;AACA;AACA;AACA;;AAEA,8CAA8C;AAC9C;AACA;AACA;;AAEA,0CAA0C;AAC1C;AACA;AACA;;AAEA,mCAAmC;AACnC;AACA;AACA;;AAEA,iEAAiE;AACjE;AACA;AACA;;AAEA,6CAA6C,gBAAgB;AAC7D;AACA;AACA,CAAC;;AAED,4CAA4C;AAC5C;AACA;AACA;;AAEA,8CAA8C;AAC9C;AACA;AACA;;AAEA,yCAAyC;AACzC;AACA;AACA;;AAEA,4CAA4C;AAC5C;AACA;AACA;;AAEA,yCAAyC;AACzC;AACA;AACA;;AAEA,+CAA+C;AAC/C;AACA;AACA;;AAEA,yCAAyC,gBAAgB;AACzD;AACA;AACA,CAAC;;AAED,0CAA0C,gBAAgB;AAC1D;AACA;AACA,CAAC;;AAED,0CAA0C;AAC1C;AACA;AACA;;AAEA,0CAA0C;AAC1C;AACA;AACA;;AAEA,0CAA0C;AAC1C;AACA;AACA;;AAEA,iDAAiD;AACjD;AACA;AACA;;AAEA,oDAAoD;AACpD;AACA;AACA;;AAEA,0CAA0C,gBAAgB;AAC1D;AACA;AACA,CAAC;;AAED,4CAA4C,gBAAgB;AAC5D;AACA;AACA,CAAC;;AAED,gDAAgD,gBAAgB;AAChE;AACA;AACA,CAAC;;AAED,4CAA4C,gBAAgB;AAC5D,cAAc,qBAAM;AACpB;AACA,CAAC;;AAED,sCAAsC;AACtC;AACA;AACA;;AAEA,4CAA4C;AAC5C;AACA;AACA;;AAEA,gEAAgE;AAChE;AACA;AACA;;AAEA,yCAAyC;AACzC;AACA;AACA;;AAEA,yCAAyC;AACzC;AACA;;AAEA,4CAA4C;AAC5C;AACA;AACA;;AAEA,mDAAmD;AACnD;AACA;AACA;;AAEA,8CAA8C;AAC9C;AACA;AACA;;AAEA,+BAA+B;AAC/B;AACA;;AAEA,gCAAgC;AAChC;AACA;AACA;;AAEA,aAAa,qFAAoB,CAAC,SAAS;AAC3C,cAAc,qDAA0B;;AAExC;AACA;AACA;AACA,qBAAqB;;AAErB","sources":["webpack://@nepoche/stats-dapp/../../node_modules/@webb-tools/wasm-utils/njs/wasm-utils-njs.js"],"sourcesContent":["let imports = {};\nimports['__wbindgen_placeholder__'] = module.exports;\nlet wasm;\nconst { TextEncoder, TextDecoder } = require(`util`);\n\nconst heap = new Array(32).fill(undefined);\n\nheap.push(undefined, null, true, false);\n\nfunction getObject(idx) { return heap[idx]; }\n\nlet heap_next = heap.length;\n\nfunction dropObject(idx) {\n    if (idx < 36) return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\n\nfunction takeObject(idx) {\n    const ret = getObject(idx);\n    dropObject(idx);\n    return ret;\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nlet cachegetUint8Memory0 = null;\nfunction getUint8Memory0() {\n    if (cachegetUint8Memory0 === null || cachegetUint8Memory0.buffer !== wasm.memory.buffer) {\n        cachegetUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachegetUint8Memory0;\n}\n\nlet cachedTextEncoder = new TextEncoder('utf-8');\n\nconst encodeString = (typeof cachedTextEncoder.encodeInto === 'function'\n    ? function (arg, view) {\n    return cachedTextEncoder.encodeInto(arg, view);\n}\n    : function (arg, view) {\n    const buf = cachedTextEncoder.encode(arg);\n    view.set(buf);\n    return {\n        read: arg.length,\n        written: buf.length\n    };\n});\n\nfunction passStringToWasm0(arg, malloc, realloc) {\n\n    if (realloc === undefined) {\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr = malloc(buf.length);\n        getUint8Memory0().subarray(ptr, ptr + buf.length).set(buf);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr;\n    }\n\n    let len = arg.length;\n    let ptr = malloc(len);\n\n    const mem = getUint8Memory0();\n\n    let offset = 0;\n\n    for (; offset < len; offset++) {\n        const code = arg.charCodeAt(offset);\n        if (code > 0x7F) break;\n        mem[ptr + offset] = code;\n    }\n\n    if (offset !== len) {\n        if (offset !== 0) {\n            arg = arg.slice(offset);\n        }\n        ptr = realloc(ptr, len, len = offset + arg.length * 3);\n        const view = getUint8Memory0().subarray(ptr + offset, ptr + len);\n        const ret = encodeString(arg, view);\n\n        offset += ret.written;\n    }\n\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n}\n\nfunction isLikeNone(x) {\n    return x === undefined || x === null;\n}\n\nlet cachegetInt32Memory0 = null;\nfunction getInt32Memory0() {\n    if (cachegetInt32Memory0 === null || cachegetInt32Memory0.buffer !== wasm.memory.buffer) {\n        cachegetInt32Memory0 = new Int32Array(wasm.memory.buffer);\n    }\n    return cachegetInt32Memory0;\n}\n\nlet cachedTextDecoder = new TextDecoder('utf-8', { ignoreBOM: true, fatal: true });\n\ncachedTextDecoder.decode();\n\nfunction getStringFromWasm0(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\n}\n\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length) heap.push(heap.length + 1);\n    const idx = heap_next;\n    heap_next = heap[idx];\n\n    heap[idx] = obj;\n    return idx;\n}\n\nlet cachegetFloat64Memory0 = null;\nfunction getFloat64Memory0() {\n    if (cachegetFloat64Memory0 === null || cachegetFloat64Memory0.buffer !== wasm.memory.buffer) {\n        cachegetFloat64Memory0 = new Float64Array(wasm.memory.buffer);\n    }\n    return cachegetFloat64Memory0;\n}\n/**\n*/\nmodule.exports.main = function() {\n    wasm.main();\n};\n\nconst u32CvtShim = new Uint32Array(2);\n\nconst uint64CvtShim = new BigUint64Array(u32CvtShim.buffer);\n\nfunction _assertClass(instance, klass) {\n    if (!(instance instanceof klass)) {\n        throw new Error(`expected instance of ${klass.name}`);\n    }\n    return instance.ptr;\n}\n/**\n* @param {any} js\n* @returns {JsNote | undefined}\n*/\nmodule.exports.js_note_of_jsval = function(js) {\n    var ret = wasm.js_note_of_jsval(addHeapObject(js));\n    return ret === 0 ? undefined : JsNote.__wrap(ret);\n};\n\n/**\n* @param {string} proof\n* @param {Array<any>} public_inputs\n* @param {string} vk\n* @param {Curve} curve\n* @returns {boolean}\n*/\nmodule.exports.verify_js_proof = function(proof, public_inputs, vk, curve) {\n    var ret = wasm.verify_js_proof(addHeapObject(proof), addHeapObject(public_inputs), addHeapObject(vk), addHeapObject(curve));\n    return ret !== 0;\n};\n\n/**\n* @param {NoteProtocol} protocol\n* @param {Curve | undefined} curve\n* @param {number | undefined} anchor_count\n* @param {number | undefined} in_count\n* @param {number | undefined} out_count\n* @returns {JsProvingKeys}\n*/\nmodule.exports.setupKeys = function(protocol, curve, anchor_count, in_count, out_count) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        wasm.setupKeys(retptr, addHeapObject(protocol), isLikeNone(curve) ? 0 : addHeapObject(curve), !isLikeNone(anchor_count), isLikeNone(anchor_count) ? 0 : anchor_count, !isLikeNone(in_count), isLikeNone(in_count) ? 0 : in_count, !isLikeNone(out_count), isLikeNone(out_count) ? 0 : out_count);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return JsProvingKeys.__wrap(r0);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n};\n\n/**\n* @param {JsProofInput} proof_input\n* @returns {JsProofOutput}\n*/\nmodule.exports.generate_proof_js = function(proof_input) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        _assertClass(proof_input, JsProofInput);\n        var ptr0 = proof_input.ptr;\n        proof_input.ptr = 0;\n        wasm.generate_proof_js(retptr, ptr0);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return JsProofOutput.__wrap(r0);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n};\n\nfunction handleError(f, args) {\n    try {\n        return f.apply(this, args);\n    } catch (e) {\n        wasm.__wbindgen_exn_store(addHeapObject(e));\n    }\n}\n\nfunction getArrayU8FromWasm0(ptr, len) {\n    return getUint8Memory0().subarray(ptr / 1, ptr / 1 + len);\n}\n/**\n*/\nclass ExtData {\n\n    static __wrap(ptr) {\n        const obj = Object.create(ExtData.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_extdata_free(ptr);\n    }\n    /**\n    * @param {Uint8Array} recipient\n    * @param {Uint8Array} relayer\n    * @param {string} ext_amount\n    * @param {string} fee\n    * @param {string} refund\n    * @param {Uint8Array} token\n    * @param {Uint8Array} encrypted_output1\n    * @param {Uint8Array} encrypted_output2\n    */\n    constructor(recipient, relayer, ext_amount, fee, refund, token, encrypted_output1, encrypted_output2) {\n        var ret = wasm.extdata_new(addHeapObject(recipient), addHeapObject(relayer), addHeapObject(ext_amount), addHeapObject(fee), addHeapObject(refund), addHeapObject(token), addHeapObject(encrypted_output1), addHeapObject(encrypted_output2));\n        return ExtData.__wrap(ret);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    get_encode() {\n        var ret = wasm.extdata_get_encode(this.ptr);\n        return takeObject(ret);\n    }\n}\nmodule.exports.ExtData = ExtData;\n/**\n*/\nclass JsLeaf {\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_jsleaf_free(ptr);\n    }\n    /**\n    * @returns {NoteProtocol}\n    */\n    get protocol() {\n        var ret = wasm.jsleaf_protocol(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    get commitment() {\n        var ret = wasm.jsleaf_commitment(this.ptr);\n        return takeObject(ret);\n    }\n}\nmodule.exports.JsLeaf = JsLeaf;\n/**\n*/\nclass JsNote {\n\n    static __wrap(ptr) {\n        const obj = Object.create(JsNote.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_jsnote_free(ptr);\n    }\n    /**\n    * @param {JsNoteBuilder} builder\n    */\n    constructor(builder) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(builder, JsNoteBuilder);\n            var ptr0 = builder.ptr;\n            builder.ptr = 0;\n            wasm.jsnote_new(retptr, ptr0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return JsNote.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} note\n    * @returns {JsNote}\n    */\n    static deserialize(note) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.jsnote_deserialize(retptr, addHeapObject(note));\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return JsNote.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    getLeafCommitment() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.jsnote_getLeafCommitment(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    serialize() {\n        var ret = wasm.jsnote_serialize(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n    * @returns {NoteProtocol}\n    */\n    get protocol() {\n        var ret = wasm.jsnote_protocol(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n    * @returns {Version}\n    */\n    get version() {\n        var ret = wasm.jsnote_version(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n    * @returns {string}\n    */\n    get targetChainId() {\n        var ret = wasm.jsnote_targetChainId(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n    * @returns {string}\n    */\n    get sourceChainId() {\n        var ret = wasm.jsnote_sourceChainId(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n    * @returns {string}\n    */\n    get targetIdentifyingData() {\n        var ret = wasm.jsnote_targetIdentifyingData(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n    * @returns {string}\n    */\n    get sourceIdentifyingData() {\n        var ret = wasm.jsnote_sourceIdentifyingData(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n    * @returns {Backend}\n    */\n    get backend() {\n        var ret = wasm.jsnote_backend(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n    * @returns {string}\n    */\n    get hashFunction() {\n        var ret = wasm.jsnote_hashFunction(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n    * @returns {Curve}\n    */\n    get curve() {\n        var ret = wasm.jsnote_curve(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n    * @returns {string}\n    */\n    get secrets() {\n        var ret = wasm.jsnote_secrets(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n    * @returns {string}\n    */\n    get tokenSymbol() {\n        var ret = wasm.jsnote_tokenSymbol(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n    * @returns {string}\n    */\n    get amount() {\n        var ret = wasm.jsnote_amount(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n    * @returns {string}\n    */\n    get denomination() {\n        var ret = wasm.jsnote_denomination(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n    * @returns {string}\n    */\n    get width() {\n        var ret = wasm.jsnote_width(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n    * @returns {string}\n    */\n    get exponentiation() {\n        var ret = wasm.jsnote_exponentiation(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n    * @param {string} index\n    */\n    mutateIndex(index) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.jsnote_mutateIndex(retptr, this.ptr, addHeapObject(index));\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {JsNote} note\n    * @returns {JsNote}\n    */\n    static defaultUtxoNote(note) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(note, JsNote);\n            wasm.jsnote_defaultUtxoNote(retptr, note.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return JsNote.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {JsUtxo}\n    */\n    getUtxo() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.jsnote_getUtxo(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return JsUtxo.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {JsUtxo} utxo\n    */\n    update_vanchor_utxo(utxo) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(utxo, JsUtxo);\n            var ptr0 = utxo.ptr;\n            utxo.ptr = 0;\n            wasm.jsnote_update_vanchor_utxo(retptr, this.ptr, ptr0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    get index() {\n        var ret = wasm.jsnote_index(this.ptr);\n        return takeObject(ret);\n    }\n}\nmodule.exports.JsNote = JsNote;\n/**\n*/\nclass JsNoteBuilder {\n\n    static __wrap(ptr) {\n        const obj = Object.create(JsNoteBuilder.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_jsnotebuilder_free(ptr);\n    }\n    /**\n    */\n    constructor() {\n        var ret = wasm.jsnotebuilder_new();\n        return JsNoteBuilder.__wrap(ret);\n    }\n    /**\n    * @param {NoteProtocol} protocol\n    */\n    protocol(protocol) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.jsnotebuilder_protocol(retptr, this.ptr, addHeapObject(protocol));\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Version} version\n    */\n    version(version) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.jsnotebuilder_version(retptr, this.ptr, addHeapObject(version));\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} source_chain_id\n    */\n    sourceChainId(source_chain_id) {\n        wasm.jsnotebuilder_sourceChainId(this.ptr, addHeapObject(source_chain_id));\n    }\n    /**\n    * @param {string} target_chain_id\n    */\n    targetChainId(target_chain_id) {\n        wasm.jsnotebuilder_targetChainId(this.ptr, addHeapObject(target_chain_id));\n    }\n    /**\n    * @param {string} source_identifying_data\n    */\n    sourceIdentifyingData(source_identifying_data) {\n        wasm.jsnotebuilder_sourceIdentifyingData(this.ptr, addHeapObject(source_identifying_data));\n    }\n    /**\n    * @param {string} target_identifying_data\n    */\n    targetIdentifyingData(target_identifying_data) {\n        wasm.jsnotebuilder_targetIdentifyingData(this.ptr, addHeapObject(target_identifying_data));\n    }\n    /**\n    * @param {Backend} backend\n    */\n    backend(backend) {\n        wasm.jsnotebuilder_backend(this.ptr, addHeapObject(backend));\n    }\n    /**\n    * @param {HashFunction} hash_function\n    */\n    hashFunction(hash_function) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.jsnotebuilder_hashFunction(retptr, this.ptr, addHeapObject(hash_function));\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Curve} curve\n    */\n    curve(curve) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.jsnotebuilder_curve(retptr, this.ptr, addHeapObject(curve));\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} token_symbol\n    */\n    tokenSymbol(token_symbol) {\n        wasm.jsnotebuilder_tokenSymbol(this.ptr, addHeapObject(token_symbol));\n    }\n    /**\n    * @param {string} amount\n    */\n    amount(amount) {\n        wasm.jsnotebuilder_amount(this.ptr, addHeapObject(amount));\n    }\n    /**\n    * @param {string} denomination\n    */\n    denomination(denomination) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.jsnotebuilder_denomination(retptr, this.ptr, addHeapObject(denomination));\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} index\n    */\n    index(index) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.jsnotebuilder_index(retptr, this.ptr, addHeapObject(index));\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} exponentiation\n    */\n    exponentiation(exponentiation) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.jsnotebuilder_exponentiation(retptr, this.ptr, addHeapObject(exponentiation));\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} width\n    */\n    width(width) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.jsnotebuilder_width(retptr, this.ptr, addHeapObject(width));\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} secrets\n    */\n    setSecrets(secrets) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.jsnotebuilder_setSecrets(retptr, this.ptr, addHeapObject(secrets));\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} private_key\n    */\n    setPrivateKey(private_key) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.jsnotebuilder_setPrivateKey(retptr, this.ptr, addHeapObject(private_key));\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} blinding\n    */\n    setBlinding(blinding) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.jsnotebuilder_setBlinding(retptr, this.ptr, addHeapObject(blinding));\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {JsNote}\n    */\n    build() {\n        try {\n            const ptr = this.__destroy_into_raw();\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.jsnotebuilder_build(retptr, ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return JsNote.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\nmodule.exports.JsNoteBuilder = JsNoteBuilder;\n/**\n*/\nclass JsProofInput {\n\n    static __wrap(ptr) {\n        const obj = Object.create(JsProofInput.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_jsproofinput_free(ptr);\n    }\n}\nmodule.exports.JsProofInput = JsProofInput;\n/**\n*/\nclass JsProofInputBuilder {\n\n    static __wrap(ptr) {\n        const obj = Object.create(JsProofInputBuilder.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_jsproofinputbuilder_free(ptr);\n    }\n    /**\n    * @param {NoteProtocol} protocol\n    */\n    constructor(protocol) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.jsproofinputbuilder_new(retptr, addHeapObject(protocol));\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return JsProofInputBuilder.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Leaves} roots\n    */\n    setRoots(roots) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.jsproofinputbuilder_setRoots(retptr, this.ptr, addHeapObject(roots));\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} recipient\n    */\n    setRecipient(recipient) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.jsproofinputbuilder_setRecipient(retptr, this.ptr, addHeapObject(recipient));\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} relayer\n    */\n    setRelayer(relayer) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.jsproofinputbuilder_setRelayer(retptr, this.ptr, addHeapObject(relayer));\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Leaves} leaves\n    */\n    setLeaves(leaves) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.jsproofinputbuilder_setLeaves(retptr, this.ptr, addHeapObject(leaves));\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {JsUtxo} utxo1\n    * @param {JsUtxo} utxo2\n    */\n    setOutputUtxos(utxo1, utxo2) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(utxo1, JsUtxo);\n            var ptr0 = utxo1.ptr;\n            utxo1.ptr = 0;\n            _assertClass(utxo2, JsUtxo);\n            var ptr1 = utxo2.ptr;\n            utxo2.ptr = 0;\n            wasm.jsproofinputbuilder_setOutputUtxos(retptr, this.ptr, ptr0, ptr1);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {LeavesMapInput} leaves_input\n    */\n    setLeavesMap(leaves_input) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(leaves_input, LeavesMapInput);\n            var ptr0 = leaves_input.ptr;\n            leaves_input.ptr = 0;\n            wasm.jsproofinputbuilder_setLeavesMap(retptr, this.ptr, ptr0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Indices} indices\n    */\n    setIndices(indices) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.jsproofinputbuilder_setIndices(retptr, this.ptr, addHeapObject(indices));\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} leaf_index\n    */\n    setLeafIndex(leaf_index) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.jsproofinputbuilder_setLeafIndex(retptr, this.ptr, addHeapObject(leaf_index));\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} fee\n    */\n    setFee(fee) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.jsproofinputbuilder_setFee(retptr, this.ptr, addHeapObject(fee));\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} refund\n    */\n    setRefund(refund) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.jsproofinputbuilder_setRefund(retptr, this.ptr, addHeapObject(refund));\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} pk\n    */\n    setPk(pk) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.jsproofinputbuilder_setPk(retptr, this.ptr, addHeapObject(pk));\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} public_amount\n    */\n    public_amount(public_amount) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.jsproofinputbuilder_public_amount(retptr, this.ptr, addHeapObject(public_amount));\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} chain_id\n    */\n    chain_id(chain_id) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.jsproofinputbuilder_chain_id(retptr, this.ptr, addHeapObject(chain_id));\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {JsNote} note\n    */\n    setNote(note) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(note, JsNote);\n            wasm.jsproofinputbuilder_setNote(retptr, this.ptr, note.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {JsProofInput}\n    */\n    build_js() {\n        try {\n            const ptr = this.__destroy_into_raw();\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.jsproofinputbuilder_build_js(retptr, ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return JsProofInput.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Set notes for VAnchor\n    * @param {Array<any>} notes\n    */\n    setNotes(notes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.jsproofinputbuilder_setNotes(retptr, this.ptr, addHeapObject(notes));\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} ex_data_hash\n    */\n    setExtDatahash(ex_data_hash) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.jsproofinputbuilder_setExtDatahash(retptr, this.ptr, addHeapObject(ex_data_hash));\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\nmodule.exports.JsProofInputBuilder = JsProofInputBuilder;\n/**\n*/\nclass JsProofOutput {\n\n    static __wrap(ptr) {\n        const obj = Object.create(JsProofOutput.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_jsproofoutput_free(ptr);\n    }\n    /**\n    * @returns {NoteProtocol}\n    */\n    get OutputProtocol() {\n        var ret = wasm.jsproofoutput_OutputProtocol(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n    * @returns {MixerProof}\n    */\n    get mixerProof() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.jsproofoutput_mixerProof(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return MixerProof.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {VAnchorProof}\n    */\n    get vanchorProof() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.jsproofoutput_vanchorProof(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return VAnchorProof.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\nmodule.exports.JsProofOutput = JsProofOutput;\n/**\n*/\nclass JsProvingKeys {\n\n    static __wrap(ptr) {\n        const obj = Object.create(JsProvingKeys.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_jsprovingkeys_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    get pk() {\n        var ret = wasm.jsprovingkeys_pk(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    get vk() {\n        var ret = wasm.jsprovingkeys_pk(this.ptr);\n        return takeObject(ret);\n    }\n}\nmodule.exports.JsProvingKeys = JsProvingKeys;\n/**\n*/\nclass JsUtxo {\n\n    static __wrap(ptr) {\n        const obj = Object.create(JsUtxo.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_jsutxo_free(ptr);\n    }\n    /**\n    * @returns {string}\n    */\n    serialize() {\n        var ret = wasm.jsutxo_serialize(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n    * @param {string} utxo_str\n    * @returns {JsUtxo}\n    */\n    static deserialize(utxo_str) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.jsutxo_deserialize(retptr, addHeapObject(utxo_str));\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return JsUtxo.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Curve} curve\n    * @param {Backend} backend\n    * @param {string} amount\n    * @param {string} chain_id\n    * @param {string | undefined} index\n    * @param {Uint8Array | undefined} private_key\n    * @param {Uint8Array | undefined} blinding\n    */\n    constructor(curve, backend, amount, chain_id, index, private_key, blinding) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.jsutxo_construct(retptr, addHeapObject(curve), addHeapObject(backend), addHeapObject(amount), addHeapObject(chain_id), isLikeNone(index) ? 0 : addHeapObject(index), isLikeNone(private_key) ? 0 : addHeapObject(private_key), isLikeNone(blinding) ? 0 : addHeapObject(blinding));\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return JsUtxo.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {BigInt}\n    */\n    get chainIdRaw() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.jsutxo_chainIdRaw(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            u32CvtShim[0] = r0;\n            u32CvtShim[1] = r1;\n            const n0 = uint64CvtShim[0];\n            return n0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    get chainId() {\n        var ret = wasm.jsutxo_chainId(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n    * @returns {string}\n    */\n    get amount() {\n        var ret = wasm.jsutxo_amount(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n    * @returns {string}\n    */\n    get blinding() {\n        var ret = wasm.jsutxo_blinding(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n    * @returns {string}\n    */\n    get secret_key() {\n        var ret = wasm.jsutxo_secret_key(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n    * @returns {any}\n    */\n    get index() {\n        var ret = wasm.jsutxo_index(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n    * @returns {string}\n    */\n    get nullifier() {\n        var ret = wasm.jsutxo_nullifier(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    get commitment() {\n        var ret = wasm.jsutxo_commitment(this.ptr);\n        return takeObject(ret);\n    }\n}\nmodule.exports.JsUtxo = JsUtxo;\n/**\n*/\nclass LeavesMapInput {\n\n    static __wrap(ptr) {\n        const obj = Object.create(LeavesMapInput.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_leavesmapinput_free(ptr);\n    }\n    /**\n    */\n    constructor() {\n        var ret = wasm.leavesmapinput_new();\n        return LeavesMapInput.__wrap(ret);\n    }\n    /**\n    * @param {BigInt} chain_id\n    * @param {Leaves} leaves\n    */\n    setChainLeaves(chain_id, leaves) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            uint64CvtShim[0] = chain_id;\n            const low0 = u32CvtShim[0];\n            const high0 = u32CvtShim[1];\n            wasm.leavesmapinput_setChainLeaves(retptr, this.ptr, low0, high0, addHeapObject(leaves));\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\nmodule.exports.LeavesMapInput = LeavesMapInput;\n/**\n*/\nclass MTBn254X5 {\n\n    static __wrap(ptr) {\n        const obj = Object.create(MTBn254X5.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_mtbn254x5_free(ptr);\n    }\n    /**\n    * @param {Leaves} initial_leaves\n    * @param {string} leaf_index\n    */\n    constructor(initial_leaves, leaf_index) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.mtbn254x5_new(retptr, addHeapObject(initial_leaves), addHeapObject(leaf_index));\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return MTBn254X5.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    get root() {\n        var ret = wasm.mtbn254x5_root(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n    * @param {Leaves} leaves\n    */\n    insert(leaves) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.mtbn254x5_insert(retptr, this.ptr, addHeapObject(leaves));\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\nmodule.exports.MTBn254X5 = MTBn254X5;\n/**\n*/\nclass MixerProof {\n\n    static __wrap(ptr) {\n        const obj = Object.create(MixerProof.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_mixerproof_free(ptr);\n    }\n    /**\n    * @returns {string}\n    */\n    get proof() {\n        var ret = wasm.mixerproof_proof(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n    * @returns {string}\n    */\n    get nullifierHash() {\n        var ret = wasm.mixerproof_nullifierHash(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n    * @returns {string}\n    */\n    get root() {\n        var ret = wasm.mixerproof_root(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n    * @returns {Array<any>}\n    */\n    get publicInputs() {\n        var ret = wasm.mixerproof_publicInputs(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    get leaf() {\n        var ret = wasm.mixerproof_leaf(this.ptr);\n        return takeObject(ret);\n    }\n}\nmodule.exports.MixerProof = MixerProof;\n/**\n* Final Operation Error\n*/\nclass OperationError {\n\n    static __wrap(ptr) {\n        const obj = Object.create(OperationError.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_operationerror_free(ptr);\n    }\n    /**\n    * @returns {any}\n    */\n    get code() {\n        var ret = wasm.operationerror_code(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n    * @returns {string}\n    */\n    get error_message() {\n        var ret = wasm.operationerror_error_message(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n    * @returns {string}\n    */\n    get message() {\n        var ret = wasm.operationerror_error_message(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n    * @returns {string}\n    */\n    get data() {\n        var ret = wasm.operationerror_data(this.ptr);\n        return takeObject(ret);\n    }\n}\nmodule.exports.OperationError = OperationError;\n/**\n*/\nclass VAnchorProof {\n\n    static __wrap(ptr) {\n        const obj = Object.create(VAnchorProof.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_vanchorproof_free(ptr);\n    }\n    /**\n    * @returns {Array<any>}\n    */\n    get publicInputs() {\n        var ret = wasm.vanchorproof_publicInputs(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n    * @returns {Array<any>}\n    */\n    get outputNotes() {\n        var ret = wasm.vanchorproof_outputNotes(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n    * @returns {Array<any>}\n    */\n    get inputUtxos() {\n        var ret = wasm.vanchorproof_inputUtxos(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n    * @returns {string}\n    */\n    get proof() {\n        var ret = wasm.vanchorproof_proof(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    get publicAmount() {\n        var ret = wasm.vanchorproof_publicAmount(this.ptr);\n        return takeObject(ret);\n    }\n}\nmodule.exports.VAnchorProof = VAnchorProof;\n\nmodule.exports.__wbindgen_object_drop_ref = function(arg0) {\n    takeObject(arg0);\n};\n\nmodule.exports.__wbindgen_string_get = function(arg0, arg1) {\n    const obj = getObject(arg1);\n    var ret = typeof(obj) === 'string' ? obj : undefined;\n    var ptr0 = isLikeNone(ret) ? 0 : passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    getInt32Memory0()[arg0 / 4 + 1] = len0;\n    getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n};\n\nmodule.exports.__wbindgen_string_new = function(arg0, arg1) {\n    var ret = getStringFromWasm0(arg0, arg1);\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbindgen_number_new = function(arg0) {\n    var ret = arg0;\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_operationerror_new = function(arg0) {\n    var ret = OperationError.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbindgen_bigint_new = function(arg0, arg1) {\n    var ret = BigInt(getStringFromWasm0(arg0, arg1));\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_jsutxo_new = function(arg0) {\n    var ret = JsUtxo.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_jsnote_new = function(arg0) {\n    var ret = JsNote.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbindgen_object_clone_ref = function(arg0) {\n    var ret = getObject(arg0);\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbindgen_number_get = function(arg0, arg1) {\n    const obj = getObject(arg1);\n    var ret = typeof(obj) === 'number' ? obj : undefined;\n    getFloat64Memory0()[arg0 / 8 + 1] = isLikeNone(ret) ? 0 : ret;\n    getInt32Memory0()[arg0 / 4 + 0] = !isLikeNone(ret);\n};\n\nmodule.exports.__wbg_new_693216e109162396 = function() {\n    var ret = new Error();\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_stack_0ddaca5d1abfb52f = function(arg0, arg1) {\n    var ret = getObject(arg1).stack;\n    var ptr0 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    getInt32Memory0()[arg0 / 4 + 1] = len0;\n    getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n};\n\nmodule.exports.__wbg_error_09919627ac0992f5 = function(arg0, arg1) {\n    try {\n        console.error(getStringFromWasm0(arg0, arg1));\n    } finally {\n        wasm.__wbindgen_free(arg0, arg1);\n    }\n};\n\nmodule.exports.__wbg_randomFillSync_378e02b85af41ab6 = function() { return handleError(function (arg0, arg1, arg2) {\n    getObject(arg0).randomFillSync(getArrayU8FromWasm0(arg1, arg2));\n}, arguments) };\n\nmodule.exports.__wbg_getRandomValues_99bbe8a65f4aef87 = function() { return handleError(function (arg0, arg1) {\n    getObject(arg0).getRandomValues(getObject(arg1));\n}, arguments) };\n\nmodule.exports.__wbg_process_5729605ce9d34ea8 = function(arg0) {\n    var ret = getObject(arg0).process;\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbindgen_is_object = function(arg0) {\n    const val = getObject(arg0);\n    var ret = typeof(val) === 'object' && val !== null;\n    return ret;\n};\n\nmodule.exports.__wbg_versions_531e16e1a776ee97 = function(arg0) {\n    var ret = getObject(arg0).versions;\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_node_18b58a160b60d170 = function(arg0) {\n    var ret = getObject(arg0).node;\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbindgen_is_string = function(arg0) {\n    var ret = typeof(getObject(arg0)) === 'string';\n    return ret;\n};\n\nmodule.exports.__wbg_static_accessor_NODE_MODULE_bdc5ca9096c68aeb = function() {\n    var ret = module;\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_require_edfaedd93e302925 = function() { return handleError(function (arg0, arg1, arg2) {\n    var ret = getObject(arg0).require(getStringFromWasm0(arg1, arg2));\n    return addHeapObject(ret);\n}, arguments) };\n\nmodule.exports.__wbg_crypto_2bc4d5b05161de5b = function(arg0) {\n    var ret = getObject(arg0).crypto;\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_msCrypto_d003eebe62c636a9 = function(arg0) {\n    var ret = getObject(arg0).msCrypto;\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_get_f45dff51f52d7222 = function(arg0, arg1) {\n    var ret = getObject(arg0)[arg1 >>> 0];\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_length_7b60f47bde714631 = function(arg0) {\n    var ret = getObject(arg0).length;\n    return ret;\n};\n\nmodule.exports.__wbg_new_16f24b0728c5e67b = function() {\n    var ret = new Array();\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_newnoargs_f579424187aa1717 = function(arg0, arg1) {\n    var ret = new Function(getStringFromWasm0(arg0, arg1));\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_get_8bbb82393651dd9c = function() { return handleError(function (arg0, arg1) {\n    var ret = Reflect.get(getObject(arg0), getObject(arg1));\n    return addHeapObject(ret);\n}, arguments) };\n\nmodule.exports.__wbg_call_89558c3e96703ca1 = function() { return handleError(function (arg0, arg1) {\n    var ret = getObject(arg0).call(getObject(arg1));\n    return addHeapObject(ret);\n}, arguments) };\n\nmodule.exports.__wbg_from_4216160a11e086ef = function(arg0) {\n    var ret = Array.from(getObject(arg0));\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_push_a72df856079e6930 = function(arg0, arg1) {\n    var ret = getObject(arg0).push(getObject(arg1));\n    return ret;\n};\n\nmodule.exports.__wbg_name_8ff16108d2c419ae = function(arg0) {\n    var ret = getObject(arg0).name;\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_constructor_4787e7aac6dc1da3 = function(arg0) {\n    var ret = getObject(arg0).constructor;\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_getPrototypeOf_77c01ca6c06f0aac = function(arg0) {\n    var ret = Object.getPrototypeOf(getObject(arg0));\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_self_e23d74ae45fb17d1 = function() { return handleError(function () {\n    var ret = self.self;\n    return addHeapObject(ret);\n}, arguments) };\n\nmodule.exports.__wbg_window_b4be7f48b24ac56e = function() { return handleError(function () {\n    var ret = window.window;\n    return addHeapObject(ret);\n}, arguments) };\n\nmodule.exports.__wbg_globalThis_d61b1f48a57191ae = function() { return handleError(function () {\n    var ret = globalThis.globalThis;\n    return addHeapObject(ret);\n}, arguments) };\n\nmodule.exports.__wbg_global_e7669da72fd7f239 = function() { return handleError(function () {\n    var ret = global.global;\n    return addHeapObject(ret);\n}, arguments) };\n\nmodule.exports.__wbindgen_is_undefined = function(arg0) {\n    var ret = getObject(arg0) === undefined;\n    return ret;\n};\n\nmodule.exports.__wbg_buffer_5e74a88a1424a2e0 = function(arg0) {\n    var ret = getObject(arg0).buffer;\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_newwithbyteoffsetandlength_278ec7532799393a = function(arg0, arg1, arg2) {\n    var ret = new Uint8Array(getObject(arg0), arg1 >>> 0, arg2 >>> 0);\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_new_e3b800e570795b3c = function(arg0) {\n    var ret = new Uint8Array(getObject(arg0));\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_set_5b8081e9d002f0df = function(arg0, arg1, arg2) {\n    getObject(arg0).set(getObject(arg1), arg2 >>> 0);\n};\n\nmodule.exports.__wbg_length_30803400a8f15c59 = function(arg0) {\n    var ret = getObject(arg0).length;\n    return ret;\n};\n\nmodule.exports.__wbg_newwithlength_5f4ce114a24dfe1e = function(arg0) {\n    var ret = new Uint8Array(arg0 >>> 0);\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_subarray_a68f835ca2af506f = function(arg0, arg1, arg2) {\n    var ret = getObject(arg0).subarray(arg1 >>> 0, arg2 >>> 0);\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbindgen_throw = function(arg0, arg1) {\n    throw new Error(getStringFromWasm0(arg0, arg1));\n};\n\nmodule.exports.__wbindgen_memory = function() {\n    var ret = wasm.memory;\n    return addHeapObject(ret);\n};\n\nconst path = require('path').join(__dirname, 'wasm-utils-njs_bg.wasm');\nconst bytes = require('fs').readFileSync(path);\n\nconst wasmModule = new WebAssembly.Module(bytes);\nconst wasmInstance = new WebAssembly.Instance(wasmModule, imports);\nwasm = wasmInstance.exports;\nmodule.exports.__wasm = wasm;\n\nwasm.__wbindgen_start();\n\n"],"names":[],"sourceRoot":""}